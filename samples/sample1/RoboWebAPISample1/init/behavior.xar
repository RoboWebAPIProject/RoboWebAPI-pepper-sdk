<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Init RoboWebAPI" id="1" localization="8" tooltip="" x="127" y="57">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="org.robowebapi/ui/close" type="0" type_size="1" nature="4" stm_value_name="org.robowebapi/ui/close" inner="1" tooltip="org.robowebapi/ui/close desc" id="4" />
                            <Input name="org.robowebapi/ui/register" type="0" type_size="1" nature="4" stm_value_name="org.robowebapi/ui/register" inner="1" tooltip="org.robowebapi/ui/register desc" id="5" />
                            <Input name="org.robowebapi/ui/reset" type="0" type_size="1" nature="4" stm_value_name="org.robowebapi/ui/reset" inner="1" tooltip="org.robowebapi/ui/reset desc" id="6" />
                            <Output name="onReadyStartService" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="8" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="init ui" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="264" y="10">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
        self.preferenceManager = ALProxy("ALPreferenceManager")

        self.myAppName = self.getParameter("App name")
        self.prefDomain = "org.robowebapi." + self.myAppName
        self.uiKey = "org.robowebapi/ui"

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.endpointURL = self.preferenceManager.getValue(self.prefDomain, "endpointURL")
        self.client_token =self.preferenceManager.getValue(self.prefDomain, "client_token")

        ready = True
        if self.endpointURL == None:
            self.endpointURL = "http://"
            ready = False

        if self.client_token == None:
            self.client_token = "未取得"
            ready = False

        self.memory.raiseEvent(self.uiKey + "/endpointURL", self.endpointURL)
        self.memory.raiseEvent(self.uiKey + "/client_token", self.client_token)

        self.onUIReady()

        if ready:
            self.onSettingReady()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onSettingReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="onUIReady" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="App name" inherits_from_parent="0" content_type="3" value="sample1" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Python Script" id="5" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="449" y="591">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[PrefDomain = "RoboWebAPI"

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):

        self.myAppName = self.getParameter("App name")
        self.prefDomain = "org.robowebapi." + self.myAppName

        self.uiKey = "org.robowebapi/ui"

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        memory.raiseEvent(self.uiKey + "/endpointURL", "http://")
        memory.raiseEvent(self.uiKey + "/client_token", "未取得")

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="App name" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="RWA Register" id="11" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="275" y="322">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[
class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), "../lib")
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

    def onUnload(self):
        pass

    def onInput_onRegister(self, url):
        import requests
        import json

        self.myAppName = self.getParameter("App name")
        self.prefDomain = "org.robowebapi." + self.myAppName

        memory = ALProxy("ALMemory")
        preferenceManager = ALProxy("ALPreferenceManager")

        register_url = url + "/registerNode?type=pepper"

        try:
            r = requests.get(register_url)
            self.endpoint = objUnicodeToUtf8(json.loads(r.content, "utf-8"))
        except Exception as inst:
            self.logger.info(inst)
            self.onFail(inst)
            return

        try:
            preferenceManager.setValue(self.prefDomain,"endpointURL", url)
            preferenceManager.setValue(self.prefDomain,"client_token", str(self.endpoint["client_token"]))
            preferenceManager.setValue(self.prefDomain,"command_token", str(self.endpoint["command_token"]))
            preferenceManager.setValue(self.prefDomain,"return_token", str(self.endpoint["return_token"]))
            preferenceManager.setValue(self.prefDomain,"event_token",  str(self.endpoint["event_token"]))
            preferenceManager.setValue(self.prefDomain,"mqtt_host", self.endpoint["mqtt_host"])
            preferenceManager.setValue(self.prefDomain, "mqtt_port", str(self.endpoint["mqtt_port"]))
            preferenceManager.setValue(self.prefDomain,"mqtt_username", str(self.endpoint["mqtt_username"]))
            preferenceManager.setValue(self.prefDomain, "mqtt_password", str(self.endpoint["mqtt_password"]))
        except Exception as inst:
            preferenceManager.removeValue(self.prefDomain,"endpointURL")
            preferenceManager.removeValue(self.prefDomain,"client_token")
            preferenceManager.removeValue(self.prefDomain,"command_token")
            preferenceManager.removeValue(self.prefDomain,"return_token")
            preferenceManager.removeValue(self.prefDomain,"event_token")
            preferenceManager.removeValue(self.prefDomain,"mqtt_host")
            preferenceManager.removeValue(self.prefDomain, "mqtt_port")
            preferenceManager.removeValue(self.prefDomain,"mqtt_username")
            preferenceManager.removeValue(self.prefDomain, "mqtt_password")
            self.logger.info(inst)
            self.onFail(inst)
            return

        self.logger.info("(RoboWebAPI client for %s) ****** connected to RoboWebAPI server! ******" % str(self.myAppName))
        self.logger.info("(RoboWebAPI client for %s) ****** client_token: %s " % (str(self.myAppName), self.endpoint["client_token"]))
        self.onReady(self.endpoint["client_token"])

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped


def objUnicodeToUtf8(o):
    r = o
    if type(o) == dict:
        r = {}
        for k in o:
            v = o[k]
            if type(k) == unicode:
                k = k.encode("utf-8")
            r[k] = objUnicodeToUtf8(v)

    elif type(o) == list:
        r = []
        for v in o:
            r.append(objUnicodeToUtf8(v))
    elif type(o) == unicode:
        r = o.encode("utf-8")

    return r]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onRegister" type="3" type_size="1" nature="2" inner="0" tooltip="pass robowebapi server url for the input" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onReady" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished.&#x0A;&#x0A;client token is the output" id="4" />
                                                <Output name="onFail" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="App name" inherits_from_parent="0" content_type="3" value="sample1" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Python Script (1)" id="12" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="446" y="284">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[PrefDomain = "RoboWebAPI"

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):

        self.myAppName = self.getParameter("App name")
        self.prefDomain = "org.robowebapi." + self.myAppName

        self.uiKey = "org.robowebapi/ui"

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        memory = ALProxy("ALMemory")
        memory.raiseEvent(self.uiKey + "/client_token", p)

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="App name" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="ui message" id="13" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="450" y="385">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.raiseEvent("org.robowebapi/ui/tablet_message", self.getParameter("message"))
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="message" inherits_from_parent="0" content_type="3" value="接続成功" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="656" y="348">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="ui message (1)" id="15" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="449" y="494">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.raiseEvent("org.robowebapi/ui/tablet_message", self.getParameter("message"))
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="message" inherits_from_parent="0" content_type="3" value="接続に失敗しました" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="reset view" id="1" localization="8" tooltip="" x="272" y="435">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Raise Event" id="2" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="378" y="133">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="org.robowebapi/ui/tablet_showButton" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="113" y="135">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("hide")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[hide]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="ui message" id="14" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="379" y="24">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.raiseEvent("org.robowebapi/ui/tablet_message", self.getParameter("message"))
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="message" inherits_from_parent="0" content_type="3" value="&amp;nbsp;" default_value="" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="1" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="639" y="93">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Show Web View" id="8" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="129" y="10">
                                                <bitmap>media/images/box/internet/internet.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            import os
            subPath = os.path.join(self.packageUid(), os.path.normpath("init_robowebapi.html").lstrip("\\/"))
            # We create TabletService here in order to avoid
            # problems with connections and disconnections of the tablet during the life of the application
            url = "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))
            tabletService.showWebview(url)
            tabletService.reloadPage(True)
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="control ui" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="786" y="349">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
        self.preferenceManager = ALProxy("ALPreferenceManager")

        self.myAppName = self.getParameter("App name")
        self.prefDomain = "org.robowebapi." + self.myAppName
        self.uiKey = "org.robowebapi/ui"

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.endpointURL = self.preferenceManager.getValue(self.prefDomain, "endpointURL")
        self.client_token =self.preferenceManager.getValue(self.prefDomain, "client_token")

        if self.client_token == None:
            self.memory.raiseEvent(self.uiKey + "/tablet_showButton", "init")
        else:
            self.memory.raiseEvent(self.uiKey + "/tablet_showButton", "ready")

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="App name" inherits_from_parent="0" content_type="3" value="sample1" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="RWA Unregister" id="6" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="280" y="544">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[
class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), "../lib")
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

    def onUnload(self):
        pass

    def onInput_onUnregister(self):
        import requests
        import json

        self.myAppName = self.getParameter("App name")
        self.prefDomain = "org.robowebapi." + self.myAppName

        memory = ALProxy("ALMemory")
        preferenceManager = ALProxy("ALPreferenceManager")

        try:
            url             = preferenceManager.getValue(self.prefDomain,"endpointURL")
            client_token    = preferenceManager.getValue(self.prefDomain,"client_token")

            unregister_url = "%s/unregisterNode/%s" % (url, client_token)

            preferenceManager.removeValue(self.prefDomain,"endpointURL")
            preferenceManager.removeValue(self.prefDomain,"client_token")
            preferenceManager.removeValue(self.prefDomain,"command_token")
            preferenceManager.removeValue(self.prefDomain,"return_token")
            preferenceManager.removeValue(self.prefDomain,"event_token")
            preferenceManager.removeValue(self.prefDomain,"mqtt_host")
            preferenceManager.removeValue(self.prefDomain, "mqtt_port")
            preferenceManager.removeValue(self.prefDomain,"mqtt_username")
            preferenceManager.removeValue(self.prefDomain, "mqtt_password")

            if len(unregister_url) > 0:
                r = requests.get(unregister_url)
                result = objUnicodeToUtf8(json.loads(r.content, "utf-8"))

        except Exception as inst:
            self.logger.info(inst)
            self.onFail(inst)

        self.logger.info("(RoboWebAPI client for %s) ****** unregister ******" % str(self.myAppName))
        self.logger.info("(RoboWebAPI client for %s) ****** client_token: %s removed.." % (str(self.myAppName),  client_token))
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box


def objUnicodeToUtf8(o):
    r = o
    if type(o) == dict:
        r = {}
        for k in o:
            v = o[k]
            if type(k) == unicode:
                k = k.encode("utf-8")
            r[k] = objUnicodeToUtf8(v)

    elif type(o) == list:
        r = []
        for v in o:
            r.append(objUnicodeToUtf8(v))
    elif type(o) == unicode:
        r = o.encode("utf-8")

    return r]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUnregister" type="1" type_size="1" nature="2" inner="0" tooltip="pass robowebapi server url for the input" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="onFail" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="App name" inherits_from_parent="0" content_type="3" value="sample1" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Play Sound" id="7" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="82" y="410">
                                                <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/button57.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                                <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                                <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                                <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                                <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                                                    <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                                                    <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                                                    <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                                                    <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                                                </Box>
                                                                <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                                                    <bitmap>media/images/box/folder.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                                    <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Audio player" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Play Sound (1)" id="9" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="266" y="136">
                                                <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/button57.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                                <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                                <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                                <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                                <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                                                    <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                                                    <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                                                    <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                                                    <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                                                </Box>
                                                                <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                                                    <bitmap>media/images/box/folder.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                                    <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Audio player" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="ui message (2)" id="14" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="445" y="80">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.raiseEvent("org.robowebapi/ui/tablet_message", self.getParameter("message"))
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="message" inherits_from_parent="0" content_type="3" value="準備完了。アプリは接続可能です。" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Hide Web View" id="4" localization="8" tooltip="Hides the webview (html content) on the tablet, behind a generic cover&#x0A;&#x0A;V1.0.0&#x0A;" x="440" y="181">
                                                <bitmap>media/images/box/internet/internet.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            tabletService.hideWebview()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="Wait (1)" id="16" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="610" y="83">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="16" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="16" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="RWA Run Service" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="258" y="58">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

        self.pingInterval = 30000000

        self.preferenceManager = None
        self.endpointURL = None
        self.client_token = None
        self.command_token = None
        self.return_token = None
        self.event_token =  None
        self.mqtt_host = None
        self.mqtt_port = None
        self.mqtt_username = None
        self.mqtt_password = None
        self.pingEndpointTask = None

    def onLoad(self):
        self.run = False
        self.pintEndpointTask = None
        self.myAppName = self.getParameter("App name")
        self.prefDomain = "org.robowebapi." + self.myAppName

        self.modules = {}
        self.webhookHandlers = {}

        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), "../lib")
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        self.preferenceManager = ALProxy("ALPreferenceManager")

    def onUnload(self):
        self._disconnectEndpoint()

        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None


    def onInput_onStart(self):
        import qi

        self.endpointURL = self.preferenceManager.getValue(self.prefDomain, "endpointURL")
        self.client_token =self.preferenceManager.getValue(self.prefDomain, "client_token")
        self.command_token = self.preferenceManager.getValue(self.prefDomain, "command_token")
        self.return_token = self.preferenceManager.getValue(self.prefDomain, "return_token")
        self.event_token =  self.preferenceManager.getValue(self.prefDomain, "event_token")
        self.mqtt_host = self.preferenceManager.getValue(self.prefDomain, "mqtt_host")
        self.mqtt_port = self.preferenceManager.getValue(self.prefDomain, "mqtt_port")
        self.mqtt_username = self.preferenceManager.getValue(self.prefDomain, "mqtt_username")
        self.mqtt_password = self.preferenceManager.getValue(self.prefDomain, "mqtt_password")

        if self.endpointURL == None:
            self.onFail("No endpoint URL found. Please init RoboWebAPI first!")
        else:
            qi.async(self._mqttThread)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def _mqttThread(self):
        import requests
        import json
        import paho.mqtt.client as mqtt

        self.run = True

        self.mqttc = mqtt.Client(client_id='', clean_session=True, protocol=mqtt.MQTTv311)

        #self.logger.info(self.mqtt_username)
        #self.logger.info(self.mqtt_password)
        #self.logger.info(self.mqtt_host)
        #self.logger.info(self.mqtt_port)

        self.mqttc.username_pw_set(self.mqtt_username, self.mqtt_password)
        self.mqttc.on_connect = self._handleConnection
        self.mqttc.on_message = self._handleMessage
        self.mqttc.connect(self.mqtt_host, self.mqtt_port, keepalive=60)

        self.pingEndpointTask = qi.PeriodicTask()
        self.pingEndpointTask.setCallback(self._pingEndpoint)
        self.pingEndpointTask.setUsPeriod(self.pingInterval)
        self.pingEndpointTask.start(True)

        self.logger.info("(RoboWebAPI client for %s) ****** Running service ******" % str(self.myAppName))
        self.logger.info("(RoboWebAPI client for %s) ****** client_token: %s " % (str(self.myAppName),self.client_token))

        self.onReady()

        self.mqttc.loop_forever()
        self.logger.info("(RoboWebAPI client for %s) ending.." % str(self.myAppName))

    def _disconnectEndpoint(self):
        if self.pingEndpointTask:
            self.pingEndpointTask.stop()

        self.pingEndpointTask = None

        for key in self.webhookHandlers:
            self.webhookHandlers[key].dropAll()

        self.webhookHandlers = {}

        if self.run == True and self.mqttc != None:
            self.logger.info("(RoboWebAPI client for %s) mqtt client unsubscribing.." % str(self.myAppName))
            self.mqttc.unsubscribe(self.command_token)
            self.mqttc.disconnect()

        self.run = False
        self.mqttc = None

    def _pingEndpoint(self) :
        if self.mqttc and self.event_token:
            self.logger.info("(RoboWebAPI client for %s) ping mqtt endpoint.." % str(self.myAppName))
            self.mqttc.publish(self.event_token, '{"client_token":self.client_token, "message": "ping"}')

    def _handleConnection(self, client, userdata, flags, rc):
        self.logger.info("(RoboWebAPI client for %s) mqtt client handlie connection called.." %  str(self.myAppName))
        self.mqttc.subscribe(self.command_token)

    def _handleMessage(self, mqttc, obj, msg):
        import json
        import qi

        r = objUnicodeToUtf8(json.loads(str(msg.payload)))
        qi.async(self._handleMessageThread, r)

        return

    def _handleMessageThread(self, r):
        import qi

        if "command" in r:
            command = r["command"]
            if command == "call":
                module = r["module"]
                method = r["method"]
                async = r["async"]
                args = r["args"]
                module_token = r["module_token"]
                method_token = r["method_token"]

                try:
                    if module_token:
                        module_toke_key = str(module_token) + module
                        if module_toke_key in self.modules:
#                            self.logger.info("reusing module: %s", str(module_toke_key) )
                            proxy = self.modules[module_toke_key]
                        else:
#                            self.logger.info("new reuse module: %s", str(module_toke_key) )
                            proxy = ALProxy(module)
                            self.modules[module_toke_key] = proxy
                    else:
                            proxy = ALProxy(module)

                    if r["async"]:
                        self.mqttc.publish(self.return_token, '{"method_token":%s,"result":null}' % (str(method_token)))

                    result = None
                    if len(args) == 0:
                        result = proxy.call(method)
                    elif len(args) == 1:
                        result = proxy.call(method,args[0])
                    elif len(args) == 2:
                        result = proxy.call(method,args[0], args[1])
                    elif len(args) == 3:
                        result = proxy.call(method,args[0], args[1], args[2])
                    elif len(args) == 4:
                        result = proxy.call(method,args[0], args[1], args[2], args[3])
                    elif len(args) == 5:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4])
                    elif len(args) == 6:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5])
                    elif len(args) == 7:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6])
                    elif len(args) == 8:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7])
                    elif len(args) == 9:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8])
                    elif len(args) == 10:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9])

                    if not async:
                        if type(result) == str:
                            self.mqttc.publish(self.return_token, '{"method_token":%s,"result":"%s"}' % (str(method_token), result))
                        elif result == None:
                            self.mqttc.publish(self.return_token, '{"method_token":%s,"result":null}' % (str(method_token)))
                        else:
                            self.mqttc.publish(self.return_token, '{"method_token":%s,"result":%s}' % (str(method_token), result))

                except Exception as inst:
                    if not async:
                        self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token),"result":None, "exception":str(inst)}))

            elif command == "addWebhook":
                key = r["key"]
                url = r["url"]
                method_token = r["method_token"]
                if key in self.webhookHandlers:
                    handler = self.webhookHandlers[key]
                else:
                    handler = self.WebhookHandlerClass(self.session(), self.logger, self.client_token, key)
                    self.webhookHandlers[key] = handler

                result = handler.addUrl(url)
                self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token), "result":result}))

            elif command == "dropWebhook":
                key = r["key"]
                url = r["url"]
                method_token = r["method_token"]

                result = None

                if key in self.webhookHandlers:
                    result = self.webhookHandlers[key].dropUrl(url)

                self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token), "result":result}))

            elif command == "exit":
                method_token = r["method_token"]
                self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token), "result":None}))
                self.onInput_onStop()

            elif command == "unregister":
                method_token = r["method_token"]
                self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token), "result":None}))
                self.onInput_onStop()


    class WebhookHandlerClass:
        def __init__(self, session, logger, client_token, key):
            self.urls = []
            self.logger = logger
            self.client_token = client_token
            self.key = key
            self.memory = session.service("ALMemory")
            self.subscriber = self.memory.subscriber(key)
            self.linkId = self.subscriber.signal.connect(self._callback)

        def _callback(self, value):
            import requests
            import datetime

            count = 0
            fail = 0
            for url in self.urls:
                result = {
                    "timestamp":datetime.datetime.now().isoformat(),
                    "client_token":self.client_token,
                    "key": self.key,
                    "value" : value
                    }

                try:
                    count = count + 1
                    requests.post(url, json=result)
                except Exception as inst:
                    fail = fail + 1

        def addUrl(self, url):
            if url not in self.urls:
                self.urls.append(url)

            return self.urls


        def dropUrl(self, url):

            if url in self.urls:
                self.urls.remove(url)

            if len(self.urls) == 0:
                self.dropAll()

            return self.urls


        def dropAll(self):
            self.urls = []
            try:
                self.subscriber.signal.disconnect(self.linkId)
            except:
                pass

def objUnicodeToUtf8(o):
    r = o
    if type(o) == dict:
        r = {}
        for k in o:
            v = o[k]
            if type(k) == unicode:
                k = k.encode("utf-8")
            r[k] = objUnicodeToUtf8(v)

    elif type(o) == list:
        r = []
        for v in o:
            r.append(objUnicodeToUtf8(v))
    elif type(o) == unicode:
        r = o.encode("utf-8")

    return r]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="onFail" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Parameter name="App name" inherits_from_parent="0" content_type="3" value="sample1" default_value="" custom_choice="0" tooltip="Set your application name.&#x0A;" id="7" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="7" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
